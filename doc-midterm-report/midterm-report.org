#+TITLE: A Haskell Platform for Creating Progressive Web Applications
#+SUBTITLE: A midterm progress report
#+AUTHOR: Jakub Zárybnický
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: [11pt,a4paper]
#+OPTIONS: H:3 num:t toc:t TeX:t LaTeX:t tags:not-in-toc

* Introduction
In this report, I will introduce the project to the reader and describe its goals
and their current status as of the end of January 2019. In particular, I will
focus on what my original plan looked like and how I deviated from it, and how I
expect to correct these flaws going forward.

I will also describe the tasks I've performed so far and propose a plan for the
remaining work, which will include an approximate time schedule.

* Project
My idea of the project originally was to build a set of libraries and patterns
that would ease the development of Haskell web applications in general. The work
would fill a niche in the language's ecosystem that is in not-insignificant
demand, and build a basis for further development of tools and libraries.

When introducing the project to my adviser, I focused in particular on
Progressive Web Applications, a rather popular topic in general web
development. In retrospect, I find that was a mistake and that I should have
emphasized the 'full-stack' aspect of my original idea, which would expose me to
a greater challenge of creating a 'pattern language' to describe different
shapes of web applications, which I find more interesting. I have nonetheless
spent some time and effort on that topic, and I hope to incorporate it into the
final result of my thesis.

Regardless, the stated goals of the project at its beginning were:

1. Study the current state of the Haskell ecosystem for creating web
   applications.
2. Find suitable libraries as a starting point for creating Progressive Web
   Applications (PWAs), i.e., web applications that can offer the user
   functionality such as working offline or push notifications.
3. Implement a framework for PWAs. Focus, in particular, on the implementation
   of components for offline storage, push notifications, and also support
   tools.
4. Create a set of example PWAs using the created framework.
5. Compare the created framework with existing (e.g. JavaScript) frameworks for
   PWAs.
6. Summarize the obtained results and discuss the future work.

The target for this first midterm checkpoint was to accomplish complete the first two
goals at a minimum.

* Work performed so far
achievements accomplished, notable results

* Further plans and schedule
discuss next work, propose a timetable or a plan of work

* Conclusion
how do I think I'll do
