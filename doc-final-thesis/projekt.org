* (front matter)                                              :ignoreheading:
#+LANGUAGE: en
#+OPTIONS: texht:nil toc:nil author:nil ':t
#+LATEX_CLASS: fitthesis
#+LATEX_CLASS_OPTIONS: [english,odsaz]
#+BIND: org-latex-title-command ""
# zadani = includes zadani.pdf
# print = B&W links and logo
# cprint = B&W links, color logo
# %\graphicspath{{obrazky-figures/}{./obrazky-figures/}}
#+LaTeX_HEADER: \input{metadata}
#+LATEX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage[figure,table,listing]{totalcount}
#+BEGIN_EXPORT latex
\maketitle
\setlength{\parskip}{0pt}
{\hypersetup{hidelinks}\tableofcontents}
\iftotalfigures\listoffigures\fi
\iftotaltables\listoftables\fi
\iftotallistings\listoflistings\fi
\iftwoside\cleardoublepage\fi
\setlength{\parskip}{0.5\bigskipamount}
#+END_EXPORT

* Introduction
Imagine you are building an application for an event your company is
organizing. There will not be reliable internet connection in the area of the
event, so it needs to work offline. You are on a tight budget, so implementing
one version for each platform is not feasible, but it needs to work reliably
across all mobile platforms and ideally in the browser as well. What's the
easiest way to accomplish that?

This situation is exactly where a rather new concept of a 'Progressive Web
Application' (PWA) is the best solution. Generally said, a PWA is website
capable of running offline, using mobile notifications, or synchronizing data in
the background - things previously specific to native mobile applications.

Now additionally consider that the application server is written in Haskell, a
statically typed, purely functional programming language. We want to reuse the
business logic already written there to avoid duplicating code, so we search for
a way to write a Web application in Haskell. We find many resources and a
quickly growing community but while creating the application, we soon step into
the unknown. A medium-scale application needs a large number of capabilities,
but the ecosystem of frontend Haskell is not yet big enough to support many of
them - most libraries in the area are either exploratory, or one-off projects.
In this work, we will try to fill in many such gaps for Haskell developers of
frontend applications, with the goal of creating a framework with a specific
focus on Progressive Web Applications.

We will first go through the details of what a Progressive Web Application is
and why it is interesting (Chapter 2). Next, we will have a look at what are the
features and responsibilities of today's Web frameworks, and how JavaScript
frameworks look (Chapter 3), followed by a quick introduction to Haskell and an
evaluation of the Haskell ecosystem in the area of Web development (Chapter
4). After seeing what is missing, we will design a framework and implement its
components (Chapter 5), walk through how to create an application using these
components (Chapter 6), and conclude with four separate case studies (Chapter
7).

** Related work
The volume of work in the area of frontend Haskell is not large, as the
Haskell-to-JavaScript compiler, GHCJS, is only available since 2013, also due to
the fact that Haskell in general is only recently being accepted as a mainstream
language. Academic work in this area is sparse, but there are several mature
projects - mainly commercially sponsored ones - under active development. Reflex
and Obelisk are a UI framework and a deployment tool respectively, from Obsidian
Systems cite:obsidian. Tweag cite:tweag is working on a Haskell-to-WebAssembly
compiler, Asterius, and QFPL cite:qfpl has created many learning materials for
frontend Haskell.

* What is a PWA?
** Web Applications Today
Web applications are more than just static HTML markup styled by CSS.

We have moved through lightweight /thin clients/, frontends to server-side
applications driven by CGI scripts written in PHP or Perl, or by compiled HTML
servers in Java or C (TODO: server-side templating), which at the time were seen
as a big step forward compared to heavyweight /thick clients,/ desktop
applications needed to be downloaded and installed.

With AJAX and XMLHttpRequest, the functionality available to JavaScript in the
browser quickly grew and later, the clients growing more capable and
interactive, and with History API came the concept of Single Page Applications
(TODO: routing, client-side templating), which needed to be only loaded once and then be fully
interactive, communicating with the server in the background. This was another
milestone in "thickening" the browser client, and the server could shrink just
to an API.

Mobile applications were a competitor to the web though, as capable as desktop
applications - fast, could work offline, ...

With Node.js, and later Cordova and Electron, it became possible to use
JavaScript and other web technologies not only in the browser, but also as an
alternative to native mobile and desktop applications.

The trend today is that of blending between native and web applications, with
the browser becoming a runtime platform. The Web Platform project is the
... TODO: browser storage

An example of the capabilities of the web today is Google Docs, which for many
businesses replaces any need for desktop office software entirely. Another
example would be Facebook Messenger, which provides text, voice and video
communications, all in the browser.

Not all websites need to be interactive applications though, and not all
browsers support every API or technology. /Isomorphic JavaScript/ or /server-side
rendering/ that can render an application either on the server or in the
browser. Static site generators and /headless CMS/ are another related concept,
where an interactive application generates a website according to ...

** Progressive Web Applications
The term 'Progressive Web Application' is an umbrella term for several
relatively new, closely related technologies. It continues in the general trend
of expanding the capabilities of browser applications and of closing the gap
between browser and native mobile applications. While many of these technologies
are useful also on desktop, the main target audience are mobile Web browsers.

The focus of web development is shifting to the mobile, as the percentage of
mobile devices compared to desktop devices is steadily increasing (TODO: ref).

Installable browser applications, push, offline - very similar to the
capabilities of native applications, user engagement, ...

The term Progressive Web Applications has an exact specification in a checklist
created by cite:pwa_checklist, which describes two levels of PWAs, a 'Baseline
PWA' and an 'Exemplary PWA'. The defining characteristics of a Baseline PWA are:

- Pages are responsive on tablets & mobile devices
- All app URLs load while offline
- Metadata provided for Add to Home screen
- Page transitions do not feel like they block on the network
- Each page has a URL
- Pages use the History API
- Site uses cache-first networking
- Site appropriately informs the user when they are offline
- Push notifications (consists of several related requirements)

While there are several more requirements for an Exemplary PWA, it is just the
baseline ones that we will focus on. The technologies used to fulfill these
requirements are relatively recent developments, but they are supported in all
major Web browsers. They are:

- Service Workers
- Web App Manifest
- IndexedDB
- Web Platform APIs

TODO: add more details and specific examples - expected use, applications

A service worker is a JavaScript program that an application can request to
install. It is functionally a configurable network proxy cite:mdn_svcwrk that can
intercept outgoing requests from the browser and that has access to a browser
cache which, among other things, enables applications to become available
offline. The service worker may also handle push notifications and background
synchronization, two new features that were traditionally available only to
native applications. Push notifications are short messages sent by the
application server to any client using browser-specific channels (e.g. Firebase
Cloud Messaging for Chrome and Android browsers, Apple Push Notification for
Apple browsers), that are shown to the user as a popup or a notification
regardless of whether the application is open or closed on the device. The
Background Sync API enables the service worker to retry requests made while
the application was offline as soon as the device goes online even when the
application is not open at that moment, which also enables some degree of
offline capabilities - any data updates can be queued and eventually executed in
batch at some point in the future.

The Web App Manifest is a W3C standardized JSON file [TODO: ref] that contains
the metadata that describe an application - its name, icons, splash screen or
language. If a page contains a link to a manifest, it indicates to the browser
that the page is a part of an application and that the application can be
installed on a device locally. For the user this means that the application can
request to be installed via a dialog window asking them to "Add to Home Screen".

IndexedDB is the only browser storage that is accessible to both the browser and
the service worker. It is a document store that supports transactions, schema
versioning, and indices. Using IndexedDB, the application is able to sync its
state with the server even when it is closed, using the Background Sync API of
the service worker.

The Web Platform is a set of APIs that expose capabilities of the underlying
system - examples include geolocation or audio/video capture
cite:what_web_can_do. Of the many APIs that comprise the Web Platform, it is the
History API and Network Information API that is necessary for a PWA. The History
API is the feature that enables the so-called /single page applications/, where
the application is loaded only once despite the user being able to navigate
between different URLs. This is achieved via artificial /navigation actions/ and
intercepting user navigation actions like "Go to previous page". The Network
Information API is what enables the application to find out whether the it can
currently access the Internet. Other APIs mentioned in the /Exemplary PWA/
requirements are the Web Share API and Credentials API that expose more of the
underlying device capabilities, sharing via other applications and the device
credential storage.

* Web frameworks of today
TODO: intro

** Features of Web Frameworks
The basis of a web framework is the *UI toolkit*, which defines the structure,
architecture and paradigm of the rest of the application. I am intentionally
using the now-uncommon term 'toolkit', as the UI frameworks we will see vary in
their scope - e.g. React is just a library with a small API, whereas Angular
provides a quite opinionated platform. Individual frameworks are quite
disparate, with large differences in the size of their community, maturity,
developer friendliness and the breadth of features or available libraries.

Frameworks usually have one defining feature they are built around (virtual DOM
for React or event streams for Angular), but there are many other concerns that
a framework needs to take care of. *Templating* is one of the essential ones. It
is a way of composing the HTML that makes up an application which also usually
includes some 'view logic' and variable interpolation. In some frameworks the
whole program is a template (purely functional React), some have templates in
separate files and pre-compile them during the build process or even in the
browser (Angular). Templates may also contain CSS as well - see the new
CSS-in-JS trend.

The second defining feature of frameworks is *state management*. This rather vague
concept may include receiving input from the user, displaying the state back to
the user, communicating with APIs and caching the responses, etc. While state
management is simple at a small scale, there are many problems that appear only
in larger applications with several developers. Some approaches include: a
'single source of the truth' and immutable data (Redux), local state in
hierarchical components (Angular), or unidirectional data flow with several
entity stores (Flux).

Another must-have feature of a framework is *routing*, which means manipulating
the displayed URL using the History API, and changing it to reflect the
application state and vice-versa. It also includes switching the application to
the correct state on start-up. While the router is usually a rather small
component, it is fundamental to the application in the same way the previous two
items are.

A component where frameworks differ a lot is a *forms* system. There are a few
layers of abstraction at which a framework can decide to implement forms,
starting at raw DOM manipulation, going on to data containers with validation
but manual rendering, all the way up to form builders using domain-specific
languages. The topic of 'forms' includes rendering a form and its data,
accepting data from the user and validating it, and sometimes even submitting it
to an API.

There are other features that a framework can provide - authentication,
standardized UI components, and others - but frameworks usually leave these to
third party libraries. There is one more topic I would like to mention that is
usually too broad to cover in the core of a framework, but important to consider
when developing an application. *Accessibility* is an area concerned with removing
barriers that would prevent any user from using a website. It has many parts to
it - while the focus is making websites accessible to screen-readers, it also
includes supporting other modes of interaction, like keyboard-only
interaction. Shortening *load times* on slow connections also makes a website
accessible in parts of the world with slower Internet connections, and
supporting *internationalization* removes language and cultural barriers.

Accessibility is something that requires framework support on several
levels. Making a site accessible requires considerations during both design
(e.g. high color contrast) and implementation (semantic elements and ARIA
attributes), and that is usually left up to application code and accessibility
checklists, with the exception of some specialized components like keyboard
focus managers. There are however tools like aXe-core that check how accessible
a finished framework is, and these can be integrated into the build process.

*Internationalization* is somewhat easier to support in a framework, as it does
include so many cross-cutting concerns. At the most basic level, it means simple
string translations, perhaps with pluralization and word order. Going further,
it may also mean supporting RTL scripts, different date/time formats, currency,
or time zones.

As for *load times*, there are many techniques frameworks use to speed up the
initial load of an application. We can talk about the first load, which can be
sped up by compressing assets (CSS, fonts, fonts or scripts) and removing
redundant ones, or by preparing some HTML that can be displayed to the user
while the rest of the application is loading to increase the perceived
speed. After the first load, the browser has some of the application's assets
cached, so loading will be faster. One of the requirements of a PWA is using the
Service Worker for instantaneous loading after the first load.

There are two patterns of preparing the HTML that is shown while the rest of the
application is loading - so called *prerendering*. One is called 'app shell',
which is a simple static HTML file that contains the basic structure of the
application's layout. The other is 'server-side rendering', and it is a somewhat
more advanced technique where the entire contents of the requested URI is
rendered on the server including the data of the first page, and the browser
part of the application takes over only afterwards, without the need to fetch
any more data. There is another variant of 'server-side rendering' called the
'JAM stack' pattern cite:jamstack, where after application state changes, the
HTML of the entire application, of all application URLs is rendered all at once
and saved so that the server does not need to render the HTML for every
request. These techniques are usually part of a framework's *supporting tools*,
about which we will talk now.

Developers from different ecosystems have wildly varying expectations on their
tools. A Python developer might expect just a text editor and an interpreter,
whereas a JVM or .NET developer might not be satisfied with anything less than a
full-featured IDE. We will start with the essentials, with *build
tools*. Nowadays, even the simplest JavaScript application usually uses a build
step that packages all its source code and styles into a single bundle for
faster loading. A framework's tool-chain may range from a set of conventions on
how to use the compiler that might get formalized in a Makefile, through a CLI
tool that takes care of building, testing and perhaps even deploying the
application, to the way of the IDE, where any build variant is just a few clicks
away.

*Debugging tools* are the next area. After building an application, trying it out,
and finding an error, these tools help in finding the error. There are generic
language-specific tools - a stepping debugger is a typical example - and there
are also framework-specific tools, like an explorer of the component hierarchy
(React) or a time-traveling debugger (Redux). In the web world, all modern
browsers provide basic debugging tools inside the 'DevTools' - a stepping
debugger and a profiler. Some frameworks build on that and provide an extension
to DevTools that interacts with the application in the current window, some
provide debugging tools integrated into the application itself.

When building or maintaining a large application with several developers, it is
necessary to ensure good practices in all steps of the development
process. There are two general categories in *quality assurance* tools - testing
(dynamic analysis) tools and static analysis tools. In the commonly used
variants, tests are used either as an aid while writing code (test-driven
development), or to prevent regressions in functionality (continuous integration
using unit tests and end-to-end tests). Static analysis tools are, in the
general practice, used to ensure a consistent code style and prevent some
categories of errors ('linters'). Frameworks commonly provide pre-configured
sets of tools of both types. If necessary - e.g. in integration testing where
the burden of set up is bigger - they also provide utility libraries to ease the
initial set up. Some frameworks also use uncommon types of tests like 'marble
tests' used in functional reactive programming systems.

*Editor integration* is also important in some ecosystems. This includes common
features of Integrated Development Environments like auto-completion or
refactoring tools. Recently the Language Server Protocol (LSP) cite:lsp project
played a big role in allowing editors to support a wide variety of languages by
implementing just an LSP client and being able to communicate with any
language-specific language server. There are some parts of editor support that
can be framework-specific like supporting an embedded domain-specific language
or integrating framework-specific debugging tools.

While we were talking about Web frameworks so far, some of them support not only
running inside the browser but also being packaged as a *mobile app* for Android
or iOS, or as a *native desktop application* for the many desktop operating
systems. For mobile support, frameworks often provide wrappers around Apache
Cordova, which is a thin wrapper around a regular website exposing some extra
capabilities of the device. Some, however, go even further and support fully
native mobile interfaces controlled by JavaScript, like React Native. The
situation is similar for desktop support, just with Electron used as the base
instead of Cordova. The main benefits of packaging a Web application instead
just running it inside a browser are performance (they are usually faster to
load and to use), access to device-specific capabilities (direct access to the
file system), or branding.

The last point in this chapter is *code generators*. of which there are two
variants: project skeleton generators, which create all files necessary for a
project to compile and run, and which are provided in a large majority of
frameworks. Then there are component generators, which may include generating a
template, a URL route and its corresponding controller, or an entire subchapter
of a website. These are less common but some frameworks also provide them.

** Web Technologies in JavaScript
- TODO: Maybe merge with the previous chapter?

Moving on, we will take a quick tour of the JavaScript ecosystem and what the
library ecosystem looks there, following the same general structure as we have
used in the chapter above.

The most popular *UI toolkits* in JavaScript are currently Angular cite:angular
and React cite:react. Vue.js cite:vuejs is another, a relatively new but quickly
growing one. Of these, Angular is the framework closest to traditional
frameworks where it tries to provide everything you might need to create an
application. React and Vue are both rather small libraries but with many
supporting tools and libraries that together also create a platform, although
they are much less cohesive than Angular's platform.

There are fundamental architectural differences between them. Angular uses plain
HTML as a base for its templates, and uses explicit event stream manipulation
for its data flow. React uses a functional approach where a component is (de
facto) just a function producing a JavaScript object, in combination with an
event-driven data flow. Vue uses HTML, CSS and JavaScript separately for its
templates, and its data flow is a built-in reactive engine.

The most common complaint about the JavaScript ecosystem in general is that it
is a 'jungle'. There are dozens or hundreds of small libraries doing the same
thing, most however incomplete or unmaintained, with no good way to decide
between them. Frameworks avoid this problem by having a recommended set of
libraries for common use cases. A different but related complaint is called the
'JavaScript fatigue'. The trends change quickly in the JavaScript ecosystem,
libraries come and go each year, a common belief is that if you are not learning
at least one new framework per year, you are missing out on opportunities.

As for the individual frameworks mentioned above: Angular is an integrated
framework that covers many common use cases in the basic platform. To some
though, it is too opinionated, too complex to learn easily, or with too much
abstraction to understand.

React and Vue are rather small libraries which means they are very flexible and
customizable. There are many variants of libraries for each feature a web
application might need, which also means that it is easy to get stuck deciding
on which library to pick out of the many options. There are React and Vue
'distributions', however, that try to avoid this by picking a set of libraries
and build tools that works together well.

As for the topics mentioned in the previous chapter - routing, forms, build
tools, mobile and desktop applications - most are built into Angular, and for
React and Vue there are dozens of options of third party libraries. In my
investigation, I have not found a weak side to any of them - which is just what
I expected, given that JavaScript is the native language of the Web.

* Haskell and the Web
** Haskell
#+CAPTION: An example of a web server in Haskell label:ex-haskell
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell :exports code
  type HackageAPI =
    "users" :> Get '[JSON] [User] :<|>
    "user" :> Capture "login" Login :> Get '[JSON] User

  getUsers :: Handler [User]
  getUser :: Login -> Handler User

  server :: Server HackageApi
  server = getUsers :<|> getUser

  getUsersClient :<|> getUserClient =
    client @HackageApi "http://hackage.haskell.org"
#+END_SRC

Haskell is described as a "statically typed, purely functional programming
language with type inference and lazy evaluation" cite:jones2003haskell. It is
originally a research language, developed as a vehicle for new research in the
area of programming languages since 1990 cite:haskell_history. It has served as
such, and in fact it still is the target of active research - some more
prominent projects are Dependent Haskell cite:eisenberg2016dependent and Linear
Haskell cite:bernardy2017linear.

Only recently has it been used in commercial work, as exemplified by Facebook's
Haskell spam filter cite:marlow2015fighting. While there are many benefits to
using a strongly typed functional language - it eliminates entire classes of
programming errors cite:Nanz_2015, anecdotally shown by the common saying that
"If it compiles, it works" - it is conceptually different from languages
commonly taught at universities. An example of Haskell code is included in
ref:ex-haskell, a snippet containing a web server whose API is completely
defined by the type =HackageAPI,= from which the types of the server and client
functions are determined using type-level functions.

As for using Haskell in the browser, it may seem strange at first glance to want
such a thing when JavaScript is the only language supported by Web
browsers. There is however a growing number of languages that compile to
JavaScript, that use it as their compile target instead of Assembly or LLVM,
which can be done either by translating the logic of the program into JavaScript
as is (transpiling), or by implementing an alternative runtime environment in
JavaScript which then interprets the byte- or source-code. Another technology
that enables languages to run in the browser is WebAssembly, an alternative
assembly language and a runtime designed specifically for the Web.

Web developers have been using JavaScript compilers for a long time -
CoffeeScript is rather popular language announced in 2010
cite:coffeescript. Also the new ECMAScript 6 or 7 features have only been usable
via 'transpilers' until browsers implemented them natively, transpilers like
Babel cite:babel. There are other, more advanced languages build with
compilation to JavaScript in mind, e.g. TypeScript, a superset of ECMAScript 6
cite:typescript, or Elm, a framework with its own language based on Haskell
cite:czaplicki2012elm. The need to compile your code before running it is now
quite accepted in the world of Web development.

The currently accepted way of running Haskell in the browser is via GHCJS, a
Haskell-to-JavaScript compiler, although there are two active projects in the
process of creating a Haskell-to-WebAssembly compiler - WebGHC cite:webghc and
Asterius cite:asterius.

** Haskell ecosystem
Going on to the Haskell ecosystem, we will also walk through it using the
structure from the 'Features' chapter. There is significant focus on the
semantics of libraries in the Haskell community, e.g. writing down mathematical
laws for the foundational types of a library and using them to prove correctness
of the code, so UI libraries have mostly used Functional Reactive Programming
(FRP) or its derivatives like 'the Elm architecture' cite:loder2018web as their
basis, as traditional imperative event-based programming does not fit those
criteria well.

There are five production-ready UI toolkits for the Web that I have found. Of
these five, React-flux and Transient are unmaintained, and Reflex, Miso, and
Concur are actively developed and ready for production use. Each one uses a
conceptually different approach to the problem of browser user interfaces, and
they differ in their maturity and the size of their community as well.

*Reflex* cite:reflex (and Reflex-DOM cite:reflex-dom, its DOM bindings) looks like
the most actively maintained and developed one. Reflex is also sponsored by
Obsidian Systems cite:obsidian and is the most popular frontend framework in the
Haskell community, so its future seems promising. Reflex follows the traditional
FRP approach with events and behaviors, adding /dynamics/, and building a rich
combinator library on top of them. There is an example of Reflex code in
ref:ex-reflex, wheŕe =eClick= is an event of unit values and =dCount= is a dynamic
of an integer.

#+CAPTION: An example of Reflex code (a counter) label:ex-reflex
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  main :: IO ()
  main = mainWidget $ do
    eClick <- button "Click me"
    dCount <- count eClick
    display dCount
#+END_SRC

*Miso* cite:miso is a re-implementation of the 'Elm architecture' in Haskell,
which means that is uses strictly uni-directional data-flow with a central data
store on the one side, and the view as a pure function that takes the state and
creates a view on the other, where the view can change the state using strictly
defined events. The ecosystem of Miso is not as well developed as Reflex's, and
the overall architecture is very limiting - which I consider a large
disadvantage. You can see an example of Miso code in ref:ex-miso, in which all
local variables from the =where= clause are bound in the expression =App {..}=. In
particular, you can see the =Action=, the =model= (a simple integer), the =update=
function, and the =view=, which together form the basis of the application.

#+CAPTION: An example of Miso code (a counter) label:ex-miso
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  data Action = AddOne
    deriving Eq

  main :: IO ()
  main = JSaddle.run 8080 $ startApp App {..}
    where
      initialAction = AddOne
      model  = 0
      subs   = []
      events = defaultEvents
      mountPoint = Nothing

      update AddOne m = noEff (m + 1)

      view x = div_ []
        [ text (ms x)
        , button_ [ onClick AddOne ] [ text "Click Me" ]
        ]
#+END_SRC

*Concur* cite:concur tries to explore a different paradigm by combining 'the best
of' the previous two approaches. The developers have so far been focusing on
exploring how this paradigm fits into browser, desktop or terminal applications,
so it has a quite small range of features. It is a technology I intend to
explore in the future when it is more mature, which however does not seem
suitable for a large application so far, at least compared to its
competitors. An example is included in ref:ex-concur, where you can see the
operator =<|>= used for combining widgets inside =main= and =>>= for sequencing in
=increment1=.

#+CAPTION: An example of Concur code (a counter) label:ex-concur
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  main :: IO ()
  main = do
    initConcur
    void $ runWidgetInBody $ void $ flip execStateT (0 :: Int) $
      forever $ increment1 <|> displayCount
    where
      increment1 = lift (el_ E.div [] $ button "Click Me") >> modify (+10)
      displayCount = do
        count <- get
        lift $ el_ E.div [] $ text $ show count ++ " clicks"
#+END_SRC

In all of these frameworks, *templating* is a feature that has been side-stepped
by creating a domain-specific language for HTML mixed with control flow. There
have been attempts at creating a more HTML-like language embedded into Haskell
or external templates, though there is no such project that is both
feature-complete and actively maintained. It is however possible to reuse
existing JavaScript components using the foreign function interface (FFI)
between Haskell and JavaScript, and that it exactly what one of the unmaintained
frameworks did to use React as its backend (react-flux).

*State management* is where the frameworks differ the most. Miso follows the Elm
architecture strictly with a central data store that can be only changed by
messages from the view, whereas Reflex and Concur are more flexible, allowing
both centralized and component-local state. A common complaint regarding Reflex
is that there is no recommended application architecture - it errs on the
other side of the flexibility vs. best practices spectrum.

As for *routing*, Miso has routing built into its base library. There are several
attempts at a routing library in Reflex, though the situation is the same as
with templating libraries. Concur with its small ecosystem does not have routing
at all, it would be necessary to implement form scratch for a production-ready
application.

In *forms* - and UI components in general - the selection is not good. There
are several components collections for Reflex which use popular CSS frameworks
(Bootstrap, Semantic UI), though each has many missing pieces and they lack
components that need to be re-implemented anew in each application - forms in
particular. Miso and Concur do not have any publicly available UI component
libraries, or at least none that I was able to find.

*Accessibility* as a whole has not been a focus of Web development in Haskell. It
is possible to reuse JavaScript accessibility testing tools however, though I
have not seen any sort of automated testing done on any of the publicly
available Haskell applications. The only area with continued developer focus is
*loading speed*, as the size of build artifacts was a problem for a long
time. That has been ameliorated to the level of a common JavaScript application
however, so that is not a critical concern. *Prerendering* is also supported by
Miso and Reflex, which helps speed up load times as well.

Moving on to the topic of *build tools*: there are three main options in Haskell -
Cabal v2 cite:cabal, Stack cite:stack, and Nix. There are also other options -
Snack cite:snack, aiming for the best of these three but not yet ready for
production use, or Mafia cite:mafia, which is not too popular in the community
at large. Cabal is the original Haskell build tool which gained a bad reputation
for some of its design decisions (the so-called 'Cabal hell'), though most of
them were fixed in 'Cabal v2' which puts it on par with its main competitor,
Stack. Stack tried to bring Haskell closer to other mainstream programming
language by introducing several new features like automatic download of the
selected compiler or a curated subset of the main Haskell package repository,
Stackage. It succeeded in that, becoming the tool of choice for a large part of
the Haskell community in the process. Nix, as mentioned in the previous chapter,
is a general-purpose build tool and not a Haskell-specific one. It has very good
cross-compilation capabilities, however, which is the reason it is especially
used for frontend Haskell.

Glasgow Haskell Compiler (GHC) is the main Haskell *compiler* used for the
creation of native binaries. Compilation to JavaScript, as required for frontend
development, is supported by a separate compiler, GHCJS, which uses GHC as a
library. Setting up a GHCJS development environment with Cabal is not a trivial
process and using Stack limits the developer to old GHC versions, so it is Nix
that is usually recommended. When set up correctly, Nix offers almost a
one-click setup, downloading the compiler and all dependencies from a binary
cache or compiling them if unavailable. Reflex especially, in the
reflex-platform cite:reflex-platform project, uses the cross-compilation
capabilities of Nix to allow applications to compile for Android, iOS, desktop,
or the web simultaneously.

The main problem of GHCJS has been speed and the size of the produced
JavaScript. The latter has been gradually improving and is now mostly on par
with modern JavaScript framework, the former is harder to improve though, and
GHCJS applications are still within a factor of 3 of native JavaScript ones
cite:nanda_bench. However, this should be improved soon by compiling to
WebAssembly instead of JavaScript. There are two projects trying to create a
Haskell-to-WebAssembly compiler in parallel - Asterius cite:asterius, and WebGHC
cite:webghc. They are so far in alpha, but I expect them to be production-ready
by the end of 2019.

Moving on to the topic of *debugging tools*, this is where Haskell on the frontend
is lacking the most. While it is possible to use the browser's built-in DevTools
and their debugger and profiler, the compiled output of GHCJS does not
correspond to the original Haskell code too much, which makes using the debugger
quite hard. There are no other debugging tools, though in my experience I did
not ever feel the need to use anything else than writing debugging output to the
console.

In contrast, there are many *quality assurance* tools available for Haskell in
general, of which almost all are available for use in frontend
development. Starting with static quality assurance, Hlint is the standard
'linter' for Haskell, well-supported and mature. There are several code
formatters, Hindent is the most widely used one, which enforces a single style
of code as is common in other contemporary languages (e.g. gofmt for Go). As for
test frameworks, there are many options. HSpec or HUnit are examples of unit- or
integration-testing frameworks, property-based testing is also common in
Haskell, with QuickCheck cite:claessen2011quickcheck being the most well-known
example. For end-to-end testing in the browser, there are libraries that
integrate with Selenium.

Haskell has a quite bad reputation for the lack of *editor integration*. The
situation is better with the recent Language Server Protocol project, where
haskell-ide-engine, Haskell's language server, enables users to write Haskell in
contemporary editors like Atom easily. The language server supports
type-checking, linting and formatting, and also common IDE features like
'go-to-definition' or 'type-at-point'.

Compiling applications as *mobile or desktop apps* is well-supported in Reflex,
though not in Miso or Concur. Using the scaffolding of reflex-platform makes
supporting different platforms almost automatic, as Nix takes care of switching
between compilers: GHCJS for the Web, regular GHC for the desktop and
cross-compiling GHC for iOS or Android. Bundling the compiled applications for
distribution for each platform is a bit more involved, though there are efforts
to automate even that.

*Code generators* are quite limited in Haskell. Stack has a templating system for
new project initialization, though there are no templates for frontend
development so far. Cabal comes with a single standard template for a blank
project but lacks customization options for creating framework-specific
templates. And Nix does not do code generation at all. The common practice so
far is to make copy of a repository containing the basics, edit project-specific
details, and use that as a base for a new project. I have not found any attempts
at component generation in Haskell.

The last point I want to mention is *documentation*. It is generally agreed that
it is Haskell's weakest point - despite having a standardized
high-quality tool for creating API documentation (haddock), writing it is often an
afterthought, with even commonly used packages having no documentation at all or
written in such a way that a new user has no choice but to study its code to
understand the package. In this work, I will strive to avoid this common flaw.

* Implementing the framework
** Implementation plan
An overview of what's ready and what's missing in Haskell. Ready:
- UI toolkit
- templating
- prerender

Missing:
- routing integrated with prerender
- PWA support - service workers, push notifications
- debugging tools
- components (forms, CSS framework bindings)
- authorization/authentication
- internationalization
- storage (TODO: mention why - not mentioned in "Elements")

As the set goal of this work is to create a framework for Progressive Web
Applications, I have selected the components that would, in my opinion, provide
a solid basis for further expansion while at the same time fulfilling the
requirements. Implementing a framework that covers all missing features is a
topic for a multi-year project for a team of developers, so the scope of my work
is limited by the resources available to me, both in time and in human
resources.

Many of the components not selected are either tightly interwoven
(internationalization with widgets, debugging tools and every other component)
or often reimplemented on a per-project basis (widgets,
authentication/authorization, internationalization). The components I chose are
usable both on their own and in combination. These components are:

- router
- service worker
- basic storage

TODO: Demonstrate the principles of components on 'src-snippets' code, where
I will show the smallest possible code that implements that functionality

TODO: show basic usage of each component

In this chapter, I will use the terminology used in the paper "Evolving Frameworks"
cite:roberts1996evolving to describe the work performed in the rest of this work
and follow-up work as well. The paper describes common stages that frameworks
take as they develop. While is uses terminology from object-oriented frameworks,
most of the concepts apply just as well In Haskell.

#+CAPTION: The timeline of patterns as described in Evolving Patterns
[[./obrazky-figures/evolving-frameworks.jpg]]

To briefly describe the terms and how they relate to this work:
- *"Three Examples"* are three applications from which the framework will
  draw common themes and architecture, so that it fulfills real-world needs. This
  is what we will go through in the next chapter, where we take three existing
  application specifications and build a Haskell version of it.
- In a *"White Box Framework"*, the architecture is extracted into a separate
  library and expanded or re-implemented in further applications. The author
  emphasizes 'programming-by-difference', where the programmer extends library
  code and later factors out commonly repeated patterns into the library. In
  this work, this is the approach taken after implementing the "Three Examples"
  to create the basics of the shared libraries.
- The next patterns, "*Component Library*", "*Hot Spots*", and
  "*Pluggable/Fine-grained Objects*" are all an extension of the above, focusing
  on extracting concrete components and restructuring the architecture to
  improve developer experience in specific ways. This level, nor the further
  ones are not implemented in this work.
- Skipping a "*Visual Builder*", which is not a common pattern in Web frameworks,
  there are some basic "*Language Tools*" implemented as a part of creating the
  libraries, namely a debugging console for watching specific values and an
  inspector of the application storage. [TODO: specify after implementing]

Not mentioned as a part of the patterns but also an essential part of framework
development is thorough documentation and guides, as well as test coverage of
library code, which is also done as a part of the work on libraries in the
latter parts of this work.

The above is a quite general description, so we will now enumerate the specifics of the
implementation plan, starting with a reiteration of the requirements of a PWA
from the introduction, which is the end goal of this work.

- Pages are responsive on tablets & mobile devices
- All app URLs load while offline
- Metadata provided for Add to Home screen
- Page transitions do not feel like they block on the network
- Each page has a URL
- Pages use the History API
- Site uses cache-first networking
- Site appropriately informs the user when they are offline
- Push notifications (consists of several related requirements)

There are, however, several components missing in the Haskell ecosystem that
need to be created from scratch:
- A full-featured browser routing library. While there are some existing
  implementations, they are either incomplete or long abandoned.
- A wrapper around ServiceWorkers
- A push notifications library. This will need to be both a server-side library,
  for creating them, and a client-side consumer, to parse them.
- A way to prerender the application - either just the HTML "app shell" or all
  pages on the site.
- An offline storage library for the client. Here are several possible variants,
  in the order of difficulty:
  - plain storage datatype with LocalStorage, SessionStorage, and IndexedDB backends
  - a storage including a transparent cache integrated with the network layer
  - a storage with an invalidation or auto-refresh functionality, using an event
    stream from the server
  - a storage with offline-capable synchronization capabilities

These components do not comprise a fully integrated framework in the sense of
e.g. Angular, such frameworks are quite uncommon in the Haskell ecosystem. More
common are collections of libraries that play well together, where one library
provides the fundamental datatype - the "architecture" of the application - and
other libraries fill in the functionality, which is what we will work on. Of the
proposed components, only the routing library is an "architectural" one in the
sense that it will influence the shape of the application and its fundamental
data types.

** Routing
A router is one of the basic components of a modern web application. There are
several features a router is concerned with: parsing the initial URL on
application start-up, changing it according to user navigation actions, storing
the navigation state for the rest of the application. In types, this might be
expressed as show in the snippet ref:router-api.

#+CAPTION: Router API label:router-api
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
parseRoute :: URL -> Route app
dispatchRoute :: Route app -> m ()
renderRoute :: Route app -> URL
#+END_SRC

*** Previous work
There are several widely used options for a server-side router, which has the
same responsibilities as a client-side one, and a very similar interface, for
the most part. These options differ in several ways, the most fundamental one
being the representation of the route, which in turns defines the basis of the
client API.

We will go through the routers of Yesod, Happstack, and Snap, all of them
popular Haskell frameworks for server-rendered web applications, and then move
on to Servant, a general-purpose routing solution for web services.

Yesod uses a special DSL (Domain Specific Language) for its router, which is
implemented via quasi-quoting, a specific flavor of meta-programming where an
arbitrary string is parsed into a Haskell expression. In this way Yesod
generates several type-class instances, implementations of the above-mentioned
functions, and a sum type containing all possible routes in an application. The
route itself is then just a plain data constructor of this sum type.

Happstack and Snap both offer a choice between using non-typed routes based on
strings, or type-safe routes similar to Yesod's approach above. For type-safe
routing, they both use the same library, =web-routes=. To use this library, the
user defines a sum type containing all possible routes in an application and
then uses library combinators to define a parser/encoder manually. The
parser/encoder is represented as a so-called /boomerang/, a composable object
containing both directions of the transformation.

Servant is newer than the above options, and it is the most popular solution for
creating web APIs in Haskell at the moment. In Servant, an API is described
using a single large type in its entirety, created by composition using
type-level operators (=:<|>=, =:>=). This type is then processed using type-classes
to create specific types suitable for implementing a server or for creating
type-safe links. This type can also be interpreted using other libraries to
generate API documentation or clients in a variety of libraries.

Of these options, Servant's approach seems to be the most flexible one as is
also demonstrated by the large number of libraries that build on the Servant
core, although the complexity of using type operators and type interpreters may
be intimidating to developers looking beneath the user-facing API, at least
compared to the simplicity of the other two approaches which use plain functions
and simple sum types at their core.

TODO: Yesod, Web-routes, Servant-generic examples

*** Servant
Servant is a general type-level DSL (Domain-Specific Language) in the domain of
web routing. An API defined using Servant is merely a type, a tree of type-level
terms composed using type operators. This API type is then interpreted using
type-level functions into value-level functions, e.g. routers.

#+CAPTION: Servant API definition label:servant-api
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  type GetUsers = "users" :> QueryParam "sortby" SortBy :> Get '[JSON] [User]
  type CreateUser = "users" :> ReqBody '[JSON] User :> Post '[JSON] UserId

  data QueryParam (name :: Symbol) (a :: Type)

  type UserAPI = GetUsers :<|>CreateUser

  server :: Server UserAPI
  server = (\sortBy -> return [users]) :<|> (\user -> saveUser user)

  getUsers :: SortBy -> ClientM [User]
  getUsers = f
    where
      (f :<|> _) = client (Proxy @UserAPI)
#+END_SRC

A single Servant endpoint is shown in ref:servant-api. It is a composition of
symbols (type-level strings) and so-called /combinators/ like =QueryParam= and =Get=,
which are usually defined as data types without any constructors as shown in the
second part of the snippet. These endpoints are then composed together using a
type-level alternation ("or") operator, =:<|>=, as shown in the third part of the
snippet.

A server implementing such an API is defined in a very similar way, the handlers
for individual endpoints are composed together using the value-level operator
=:<|>=, as can be seen in the middle of the snippet. A client for the API is not
created by composition but by decomposition of the =:<|>= constructor as shown in
the last part of the snippet.

#+CAPTION: Servant Generic API definition label:servant-generic-api
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  data UserAPI = UserAPI
    { _getUsers :: "users" :> QueryParam "sortby" SortBy :> Get '[JSON] [User]
    , _createUser :: "users" :> ReqBody '[JSON] User :> Post '[JSON] UserId
    } deriving (Generic)

  server :: Server (ToServant UserAPI)
  server = toServant $ UserAPI
    { _getUsers = \sortBy -> return [users]
    , _createUser = \user -> saveUser user
    }

  getUsers :: SortBy -> ClientM [User]
  getUsers = _getUsers apiClient
    where
      apiClient = genericClient @UserAPI
#+END_SRC

An alternative approach to defining an API is using records. This approach uses
Haskell's support for datatype-generic programming to convert between a record
and a tree that uses =:<|>= on both the type-level and value-level. It is easier
to work with larger APIs in this way and it makes for easier-to-read type
errors. It is also possible to refer to individual endpoints using record
accessors, instead of (de)composition of the entire server or client. The code
in ref:servant-generic-api is functionally equivalent to the previous snippet,

The interpretation of an API type is done via type classes, a language feature
that is commonly compared to interfaces in object-oriented languages, but in
this case its use is a bit more involved. The API type is interpreted
recursively from the top, one combinator at a time starting from the outermost
=:<|>=. In the case of a server, the API type is also translated into the type of
the handler using an associated type family. Despite its name, a type family
defines a type-level function - given a type of an endpoint, find the type of a
handler.

We will see this process in more detail in a later chapter, when defining an
entirely new interpretation of an API type in the creation of a client router,
and when extending an existing interpretation to support prerendering of
applications on the server.

*** Reflex
Before we dive into the implementation of the router, we also need to go through
the basics of Reflex, as its philosophy and building blocks constrain the
shape of any function we design.

As mentioned in the introductory chapters, Reflex is a general /Functional
Reactive Programming/ (FRP) library.

FRP in general is a way of programming where the program consists of a network
of time-varying values and functions combining such values.

- TODO: More FRP intro

The basic building blocks of FRP are events, objects which have a value only on
a specific moment, and behaviors, which have a value at any point. Reflex adds
a third primitive, a /dynamic/, which is a pair of a behavior and an event which
fires whenever the behavior changes.

Reflex is a general FRP library, to interact with the external world it needs
bindings to read external values and translate Reflex events into external
actions. There are several such bindings: =reflex-dom= for the browser,
=reflex-backend-wai= for the WAI web server interface, =diagrams-reflex= for SVG
animations, and several others. The one we will use in the rest of this work is
=reflex-dom=, which contains the necessary building blocks for web applications -
functions to create and animate HTML elements, listen on browser events, or
perform HTTP requests.

Reflex and Reflex-DOM provide the basic building blocks for creating
applications, but they don't fall to a natural structure for bigger applications
the way object-oriented frameworks do as in MVC and its variations. In fact, one
of the most common complaints of developers exploring Reflex is the lack of a
developed application architecture.

It is possible to recreate the Elm architecture in Reflex, as well as more
fine-grained architectures using small stateful components communicating with
top-level application logic. Several patterns have emerged so far, but none has
been generally accepted so far, and the one that has (Gonimo architecture, [TODO
ref]) requires a large amount of trivial "plumbing" code.

There are however several smaller structural patterns that have slowly emerged
as 'rules of thumb'. "Dynamics as component inputs, events as outputs" is one
such, which has been somewhat formalized as a combination of monad transformers
(=ReaderT= and =EventWriterT=) in Reflex itself.

Reflex is composed of several fine-grained typeclasses. These are abstract, and
they are translated into a series of monad transformers and their interpreters
on the top level.

There are several common methods of formalizing application architecture in
Haskell. Each method tries to abstract implementation details from application
logic by identifying all side-effects that a program requires and decomposing
them into individual effects. The methods are:

- Monad transformers and MTL-like typeclasses
- ReaderT with a top-level application state
- Effect interpreters (free monads, freer monads)

Each one has its advantages and disadvantages, and while they can be mostly
arbitrarily intermixed, each application or library usually chooses one. The
most popular in the Haskell community and used by the majority of libraries is
monad transformers and MTL-like classes, which is also the method that Reflex
uses.

A signature of a component in a program structured in this way would look
something like ref:mtl-api, where first two constraints of =userView= would be
executed using the function =runApp=, with the remaining =MonadWidget= being
executed by the top-level rendering function.

#+CAPTION: MTL-based API label:mtl-api
#+BEGIN_SRC haskell
  userView ::
       (MonadReader AppState m, MonadRouter AppRoute m, MonadWidget t m)
    => Dynamic t User
    -> m (Event t UserEdit)

  runAppM :: MonadWidget t m => RouterT AppRoute (ReaderT AppState m) a -> m a
#+END_SRC

*** Implementation

I have decided to use Servant's approach in my work, as it seems to be the most
flexible and extendable one.

My contributions in this area are:
- a client-side router using Reflex's FRP types
- an extension of the server-side router to support rendering Reflex applications
- a static site generator
- JAM-stack-like web
- a combinator to more easily work with servant-generic types (=.>=)

TODO: demonstrate client router approach (a few type class instances and the
top-level router)
TODO: demonstrate in-app links
TODO: demonstrate App instance of HasServer

*** Possible extensions
Next work:
- AuthProtect, AuthRoleProtect
- route matcher for route checks (separate typeclass)

** Service workers
TODO: general intro

*** Requirements
The Service Worker features that we aim to support are: precaching, fetch
control, and push notifications.

Precaching means storing the files essential for the application into cache as
soon as the Service Worker starts. This way, the application is able to run
offline. These files usually include =index.html=, the application entrypoint;
=bundle.js= (or similar), the JavaScript bundle containing the entire application,
and =bundle.css=, a bundle with all application styles. Application icons and
fonts are usually included as well, as are analytics libraries for usage
tracking.

Fetch control in this context means intercepting all outgoing requests from the
application, and deciding what to do with them based on the URL or method. This
feature has many use-cases, e.g. using the precached application files when
offline, checking for a new version of the application and notifying the user;
storing external fetched resources into cache to save data, or storing outgoing
analytics requests into a queue when offline and only sending them when the user
later connects to the Internet.

Push notifications are the feature for which service workers are most well
known. They allow a web application to send notifications to any of its clients,
where the application can choose to arbitrarily process the notification.

The basis of the implementation is a single dependently typed record that
contains the entire configuration of the worker. This record is then used in
three different contexts: to generate the worker JavaScript and serve it over
HTTP, in the client for any interactions with the worker (e.g. to subscribe to
push notifications), and on the server for sending the notifications, as
illustrated by ref:service-worker-api.

#+CAPTION: Service Worker API label:service-worker-api
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
generateWorker :: ServiceWorker push -> ByteString
runServiceWorkerClientT :: ServiceWorker push -> ServiceWorkerClientT push m a -> m a
runPushServerT :: ServiceWorker push -> PushT push m a -> m a
#+END_SRC

While I'd originally intended to create the service worker using GHCJS and the
JavaScript FFI (Foreign Function Interface), there is an obstacle that prevents
that: service workers do not run in the same way that a regular browser
application does. A browser can terminate a service worker at any time to save
computing resources, and restarts it when it is needed to process application
events, so a service worker is expected to contain mostly just event handlers.

This is however at odds with the GHCJS execution model which relies on
=setTimeout= or =requestAnimationFrame= to support multiple threads, asynchronous
execution, and other features needed to run the entirety of Haskell in the
browser. That means that we cannot use GHCJS to create Service Workers and need
to generate plain JavaScript code instead.

*** JMacro
Of the options available for generation of JavaScript in Haskell, only the
library JMacro is suitable for this task, as it is the only library intended for
this purpose, none of the other libraries are very user-friendly.

JMacro allows the user to write plain JavaScript code embedded in Haskell via
quasi-quotation, which is a method of meta-programming that makes it possible to
transform arbitrary strings into Haskell expressions. The library supports the
entirety of ECMAScript 3, so most existing JavaScript code can be copy-pasted
without the need for changes, as long as it doesn't use the features of newer
ECMAScript versions. JMacro is untyped, it recognizes two forms of JavaScript
code, expressions and statements. It also supports injection of Haskell
variables using anti-quotation. An example of JMacro code can be seen in ref:jmacro.

#+CAPTION: An example of JMacro label:jmacro
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  handleFetch :: JExpr -> JStat
  handleFetch fn = [jmacro|self.addEventListener('fetch', `(fn)`);|]

  sw :: JStat
  sw = handleFetch [jmacroE|
  function(evt) {
    console.log('The service worker is serving the asset.');
    evt.respondWith(fromNetwork(evt.request, 400).then(null, function () {
      return fromCache(`(cacheName)`, evt.request);
    }));
  }|]
#+END_SRC

*** Implementation
The three features of service workers that we want to support (prefetch, fetch
control, push notifications)

Prefetch is simple, only save the requested files into cache in the onInstall
handler.

Fetch is a bit more involved. In the onFetch handler, we need to find out if the
outgoing request matches any of the configured filters, so we go through the
filters in order and if a request matches, the selected cache strategy is
executed. There are many possible behaviors with regards to caching and network
access. We cannot cover all possible cases, but we can cover common ones. These
are encoded as a plain sum type, which can be seen in ref:cache-strategy. Most
strategy names are self-explanatory, I will mention only =StaleWhileRevalidate=
and its =Notify= variation: these serve the currently cached version of a
resource, and attempt to fetch a newer one, which will then be stored into cache
for later requests. This strategy is often used for main application files,
which is the reason for the =Notify= variation, which will also notify the
application itself if there is a newer version available and the application can
then notify the user.

#+CAPTION: Cache strategies label:cache-strategy
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  data CacheStrategy
    = CacheFirst Text
    | CacheOnly Text
    | NetworkFirst Text
    | NetworkOnly
    | StaleWhileRevalidate Text
    | StaleWhileRevalidateNotify Text
    deriving (Eq, Ord, Show)
#+END_SRC

TODO: Talk about matchers

Handling push notifications is not trivial either. While using them in the most
basic way is as simple as calling =showNotification= on the body of the incoming
message, it is possible to do more, like passing the notification to the
application using =postMessage=. Like with cache strategies, it is not possible to
cover all possible use-cases with predefined options so again, we add the common
ones. This time, they need to be encoded as a /GADT/ (Generic Algebraic Data Type),
an extension of Haskell data types that allows us to specialize the type of a data
constructor, which we can use to specialize the types of sending and receiving
functions in client and server code.

The options I have selected for the library are included in
ref:push-behaviors. =Ignore= has the type =Void= as its parameter, which is an empty
type that can have no valid values (excluding =undefined=), which means that it is
impossible to call a sending function in server code. =Ignore= has no handler code
generated in the service worker. =ViewOnly= displays a notification without any
further handling. =ViewAndOpen= and =ViewAndProcess= both add another event handler
that listens for the user clicking on the notification, which will open the
application if closed, and switch to the application window if open but not
focused. =ViewAndProcess= and =ProcessOnly= will also pass the message to the
application for further processing via =postMessage=.

#+CAPTION: Push behaviors label:push-behaviors
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  data PushBehavior a where
    PushIgnore :: PushConfig Void
    PushViewOnly :: PushConfig ()
    PushViewAndOpen :: PushConfig ()
    PushViewAndProcess :: FromJSON a => PushConfig a
    PushProcessOnly :: FromJSON a => PushConfig a
#+END_SRC

The rest of the service worker generation does not contain any non-obvious code,
so I will skip it. It is included with the rest of the source code on the
attached data storage.

The server part of this component is made up of two parts: generating and
serving the service worker code, and sending push notifications.

Serving the service worker is done by creating a new instance of the method
=MimeRender,= which tells the server how to render a value to a binary format.

The ability to send push notifications is added to handler code using a monad
transformer and a type class containing a single method, =sendPushNotification=.
The monad transformer contains a ReaderT containing the server VAPID keys, which
are necessary for... This transformer uses Servant "context"
capabilities... TODO: finish this.

TODO: describe client class methods (mainly for the dependent types + interpreter)

*** Possible extensions
The obvious follow-up work is supporting more features of service workers:
fine-grained cache control with resource expiration based on its age or available
storage space; or /Background Sync/, an API for queuing requests mane when the device
was offline to be retried whenever it goes online, whether the application is
open or closed.

Supporting more exotic use-cases is also possible next work, use-cases like
communication between multiple instances of an application using the service
worker as a relay, or using fetch control as a load balancer to dynamically
switch between servers from which the application downloads data.

However, there is another approach that would obsolete most of the work on this
component: after creating this component, I have discovered a project trying to
create a typed DSL (Domain-Specific Language) for generating JavaScript, =jshark=
(TODO: ref). While I originally disregarded the approach of making a typed DSL
instead of a library with a fixed selection of options, as the DSL would need to
be able to represent arbitrary JavaScript logic, using this library (or a
similar one) would allow building a hierarchy of functions hiding more and more
of the underlying logic. However, as of the time of writing, this library is
still unfinished, so writing a service worker builder using a typed DSL stays a
project for the future.

A hypothetical example of such approach can be seen in
ref:jshark, which demonstrates more complex usage of fetch control, dispatching
requests based on their destination (the originator of a request, e.g. ="style"=
corresponds to a =<style>= tag or a CSS include).

#+CAPTION: Service worker using a JavaScript DSL label:jshark
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  sw :: WorkerM ()
  sw = self `on` fetch $ \event -> do
    dest <- event ^. request . destination
    switch dest $ do
      case_ "font" $
        respondWith event cacheOnly
      cases_ ["style", "script", "document", "image"] $
        respondWith event networkFirst
      default_ $
        respondWith event networkOnly
#+END_SRC

This approach may also be combined with code generation from WebIDL, an
interface definition language for the Web (TODO: ref) used e.g. in the Chromium
browser, to produce an API that exactly corresponds to the underlying JavaScript
one, only with strong types. Generating an API from WebIDL has a precedent in
the library =ghcjs-dom=, a library that provides a strongly-typed interface to
most browser APIs, which generates most of its code in this way.

** Storage
A storage library can be implemented in many ways.

TODO: describe possible options, all the way to PouchDB and Datascript

In this regard, I am not looking to build a library with many features but
merely a building block that can serve basic purposes. The goal of this chapter
is to build an in-memory key-value store synchronized with the LocalStorage
browser API. The API of the store interface is simple, as shown by
ref:storage-api, but it can serve not only as a simple cache, but also as a way
to prerender data into HTML directly on the server, which would also enable
using Reflex as a static site generator.

#+CAPTION: Storage API label:storage-api
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
get :: Behavior t (Key e) -> m (Dynamic t (Maybe e))
getAll :: m (Dynamic t (Map (Key e) e))
put :: Event t (Key e, Maybe e) -> m ()
putAll :: Event t (Map (Key e) e) -> m ()
#+END_SRC

There are several ways of extending the API like adding expiration (automatic
or manual) so that it can better serve as a cache (e.g. function =getOrFetch=),
but this is sufficient for many use-cases.

TODO: Refer to the [[Reflex]] chapter

TODO: How to implement the class? Pure in-memory binding, localStorage backed storage,
database (for prerender) handler.

* Application development
In this chapter we will go through some principles and techniques that I used
while creating the case studies described in the next chapter, of which most can
be applied to developing Reflex applications in general.

** Design
While there are not yet many patterns specific to FRP or frontend applications,
one common way to structure a Haskell application in general is the so-called
/three layer cake [TODO: ref]/, which is as applicable to Reflex applications as
to any other Haskell application. This architectural pattern describes three
layers of code, where each one uses a different approach and different sort of
types.

The innermost layer contains only plain data types and pure functions, it is the
core of an application. This layer should be designed in such as way as to be
easily testable using property-based tests or unit tests, so it should not
interact with the outer world at all.

The intermediate layer consists of domain-specific effects, often written using
a domain-specific language. In the specific case of a Reflex application it
means extending the base monad using monad transformers, both library-provided
and application-specific ones. Each function should list out only the effects it
uses and not specialize the underlying monad transformer stack, so that it is
possible to test such functions using other interpretations of the effects, ones
that do not need the full environment of an application.

Finally the outermost, top-level layer contains the interpreters for the
effects, connecting the application to the rest of the world. Testing this layer
is usually done via end-to-end tests, running the full application.

There are as many approaches to designing a Haskell application as there are for
any other language. One axis along which it is possible to describe possible
approaches is bottom-up/top-down, where bottom-up development starts at the
innermost layer, designing the entities used in an application and basic
operations on them, and top-down, which starts from the simplest possible
working solution (the outermost layer), slowly formalizing the effects and
domain of an application.

While I used the top-down approach when initially creating the applications
described in the chapter [[Case studies]], we will walk through them the other way
around, as top-down development is often iterative in nature and describing the
individual iterations I went through would make for an unnecessarily long text.

** Tools
Haskell developer tooling is often said to be one of its weakest points, and
that is also true in Haskell on the frontend. While the situation is improving,
the tooling is still not on par with more mainstream languages. Despite that, my
personal developer experience with Haskell has been rather more pleasant than my
experience when writing React.js applications in JavaScript.

What follows is a description of the specific tooling used in the creation of
this thesis, both the libraries and applications described here. While all of
this information is still valid as of the time of writing, there are some tools
created after I started creating this thesis: Obelisk (TODO: ref), a
command-line tool that wraps =nix-build=, =nix-shell=, and =ghcid= for easier
onboarding experience, or Lorri (TODO: ref) which wraps =nix-shell= and =direnv=. I
did not take the time to incorporate these tools into my workflow, but both are
mostly a formalization of best practices, and so would not likely change much.

The central tool of this workflow is Nix cite:dolstra2006purely, described as a
'purely functional package manager' with focus on reproducibility and
isolation. Packages built using Nix are compiled in a sandbox and immutable
afterwards. Dependencies are tracked per-package, multiple versions of a shared
library can be safely used in parallel. There are other tools built on top of
Nix: NixOS, a declarative operating system, and NixOps, a cloud deployment tool
cite:dolstra2008nixos, but the main reason we will use Nix is the ease of
setting up a cross-compiling toolchain, for compiling to JavaScript or
Android/iOS.

Nix contains several command-line tools, of which two are interesting
to us. The tool =nix-build= evaluates the recipe for a package (called a
derivation) and executes it, in our case producing a Haskell binary or a
JavaScript bundle. The second tool, =nix-shell=, evaluates a recipe for a package,
builds all dependencies and build tools, and starts a terminal session with
specially crafted environment variables that has all tools and dependencies
available.

Nix has a large repository of package definitions called =nixpkgs= (TODO: ref),
which among other contains the definitions of several versions the GHC compiler
including GHCJS and of most Haskell packages. It is possible, among other
things, to build a single packages using multiple versions of the compiler by
simply varying a =nix-build= command, or to add arbitrary build logic like "use
this set of flags for GHCJS and add an extra native dependency when
cross-compiling to Android".

Reflex-platform is a set of extensions to =nixpkgs=, which includes a set of
overrides that work together well for building a single package for the Web and
mobile (Android and iOS), as well as a set of Nix functions for working with
multi-package projects (=project.nix=). These functions also make it easy to start
a =nix-shell= with additional build tools. One notable example is Hoogle (TODO:
ref), an API search engine for Haskell that indexes all dependencies used in a
project.

To be more specific, a project will contain one file =default.nix= that calls the
=project.nix= function of reflex-platform with all Haskell packages in the project
and any possible package overrides, like using a code from a remote Git
repository or using an older version of a package. This file =default.nix= is then
used by all Nix commands invoked in the directory that contains it.

A command like =nix-build -A ghcjs.my-project= will then produce a directory
=result/= with the result of the Nix build recipe, a set of JavaScript files and a
file =index.html= in the case of GHCJS. Calling =nix-build= however runs many steps
by default: compiling object code and profiled object code, generating API
documentation, and linking any executables into binary files or JavaScript
bundles, together with any other user-specified post-processing steps like
compressing the generated JavaScript code using =closure-compiler=. Running all of
these steps is quite slow though, so we use different tools for compilation
during development.

Inside a =nix-shell=, we have tools like =ghci= or =cabal repl=, interactive Haskell
interpreters that can quickly load source code. We can use these tools to simply
reload any changed files while skipping unchanged ones, which is a lot faster
than compiling the entire package from scratch.

We can go a step further and set up a background process that watches the source
code for a project for any changes and reloads them whenever any file changes,
and optionally calls a function if the files load without any compile
errors. This means we can have e.g. a development web server that is always
running the latest code. This functionality is implemented in a tool called
=ghcid= (TODO: ref, GHCi daemon), and it is now so common in the Haskell community
that some developers report that Vim and ghcid are the only two tools they need.

Such a setup makes developing a lot faster, especially given that it is possible
to run browser applications in the same way using the library =jsaddle-warp=. It
works around the slow compile times of GHCJS by using the GHC interpreter and
using a specific execution model in which as much code as possible is executed
natively in GHCi, and only the necessary parts are executed in a browser which
is connected to the server running in GHCi by WebSockets.

A tool that makes working with Nix shells easier is =direnv= (TODO: ref), which is
a general tool that changes the environment variables in a terminal according to
the directory into which a user navigates. In a Nix project specifically, is the
file =.envrc= with the contents =use nix= exists at the root of the project, a
=nix-shell= is loaded whenever a developer navigates into the project directory or
any of its subdirectories.

The editor I use, Emacs, uses all of the components described above to provide a
full-fledged Haskell development environment. Using =direnv-mode= and =dante-mode=,
two Emacs extensions, the editor loads the nix-shell immediately after opening a
file in a project, and starts a ghci process in the background to check the file
for any errors or warnings, which are then reported on the relevant lines.
Other editors like Visual Studio Code or Atom are also supported using the
Language Server Protocol and its Haskell server Haskell IDE Engine.

The interested reader can try editing Haskell in a preconfigured Emacs or Visual
Studio Code using the Nix expressions in the directories
=src-snippets/editor-emacs/= or =src-snippets/editor-vscode/= in the included files.

Niceties: hlint for code style and avoiding dumb errors, it is possible to
extend using project-specific rules/suggestions; hoogle for easy access
to the correct versions of API doc.

** Workflow
When starting a project, create a project skeleton - *.cabal file, default.nix
and possibly a submodule of reflex-platform, .envrc for direnv support, and
source code stubs (src/Main.hs).

TODO: include a snippet of src/default.nix for a multi-package
TODO: include a =$ tree= of a project directory of full-stack app (src-bin/main x
src/Project.hs (main)

ghcid + cabal new-repl for testing localhost server, included as the script
ghcid-here in =src-snippets/ghcid-here/=.

If external services are necessary, use the orchestration service needed - NixOS
containers, NixOps machines, Docker containers - according to the deployment
strategy. It is also possible to run a database without a container, SQLite or
gargoyle for postgres.

Regarding code structure:
- splitting frontend, common, backend packages
- common = entities and logic, inner layer of 3layer + API definition, routes, ...
- src-bin/main.hs only a redirect to src/Project.hs (main)
- project-specific Prelude

Components:
- sketch HTML, then animate/bind events
- prefer top-down data flow, do not often use top-level storage/... constraints
  => more reusable components
- Dynamic inputs, Event outputs
- think hard about whether a piece of state should be local or global, it makes
  reuse harder
- limit recursive-do blocks, they lead to hard-to-debug errors ("causality loop")

** Deployment
TODO: intro - deploying the server for a full-stack app

The options for deploying a Haskell program are generally the same as deploying
programs in any other compiled language that does not use intermediate object
code like Java.The two most popular options in the Haskell community, not
including Nix, are: deploying a statically linked executable file, and using
Docker containers.

As we use Nix as our build tool, there are a few other options. If we have Nix
available at the target machine, we can simply run =nix-build= and copy the
package and all its dependencies to that machine using =nix-copy-closure=.

If Nix is not available at the target machine, we can build a static executable
or produce a container. We can also build truly static executables that do not
depend on the target machine's glibc standard library by using the musl overlay
of nixpkgs, simply by replacing =pkgs= with =pkgsMusl= in the project's Nix files.
To build a Docker image, we can use the nixpkgs function
=pkgs.dockerTools.buildImage=.

Also, using Nix to build packages gives us the option to use NixOps as an
orchestration tool, which is a way of managing NixOS systems across a variety of
different cloud providers, from Amazon Web Services to Google Compute Engine. An
example of an expression that deploys a simple web server can be seen in
ref:nixops-deploy.

#+CAPTION: NixOps deployment label:nixops-deploy
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC nix :exports none
  {
    network.description = "Web server";

    webserver = { config, pkgs, ... }: let
      appPkgs = (import ./release.nix { inherit pkgs; });
    in {
      networking.firewall.allowedTCPPorts = [ 80 ];
      services.nginx.enable = true;
      services.nginx.virtualHosts.default.locations."/" = {
        proxyPass = "http://localhost:3000";
      };
      systemd.services.app-server = {
        wantedBy = [ "multi-user.target" ];
        serviceConfig.ExecStart = "${appPkgs.server}/bin/server";
      };

      deployment.targetEnv = "virtualbox";
    };
  }
#+END_SRC

When deploying a web server, there is also the need to deploy static files as
well, assets like application style sheets or icons. An important question here
is whether the assets will be served by the same server as the application. If
no, we need to produce two or more packages in the build process, which will be
deployed separately. If yes, we can again produce assets as a separate package,
but we can also bundle them into the same package using an additional Nix build
recipe.

For a GHCJS application, such a post-processing step is nearly mandatory, as the
JavaScript files produced by the compiler are rather large (over 5.9~MB for a
simple Reflex application), but processing them with a minification tool like
=closure-compiler= and further shrinking them with a GZIP compressor reduces the
size to a reasonable size (1.9~MB minified and 350~kB compressed for the same
application).

* Case studies
In this chapter we will go through three Reflex application in the order of
increasing complexity, applications that use the components created in previous
chapters. I have used applications with publicly available specifications that
are intended to help developers compare frontend web frameworks. The interested
reader can compare the implementations created here and the implementations
available for comparison side-by-side, but in this chapter, we will only go
through the basics of each case study, the overall structure and interesting
parts of each application.

The applications chosen are:
- TodoMVC, a to-do list application (storage and routing components)
- HNPWA, a reading application for the news platform Hacker News (routing and
  service worker components)
- RealWorld, a simplified version of the publishing platform Medium (storage,
  routing, and service worker components)

** TodoMVC
There is an abundance of web frameworks, and there are several projects that aim
to give developers a side-by-side comparison of them. Out of these, the original
and most well-known one is TodoMVC cite:todomvc, which is aimed at "MV* frontend
frameworks". There are currently 64 implementations of their specification -
some of them are variants of the same framework though.

We will start with TodoMVC as it is the simplest of the three. TodoMVC is, as
the name hints, a web application for managing a to-do list. It is not a complex
project but it is intended to exercise fundamental features of a framework - DOM
manipulation, forms and validation, state management (in-memory and in
LocalStorage), and routing.

Going from the bottom up, the definition of a task is as simple as possible: a
task consists of a title, a binary value indicating whether it is complete, and
according to the specification, a task saved in persistent storage also needs a
unique identifier. One possible representation is having a task be a two-member
record and the application state a mapping from an integer to a task, as shown
in ref:todomvc-entities.

If the tasks were to be also transferred from/to a server and saved in a
database, the record would look quite different: the identifier might be a UUID
(Universally Unique Identifier), the entity would likely contain information
about when and who created or modified it, but considering this is a client-only
application that does not need this kind of complexity, we can use the simplest
possible solution.

#+CAPTION: TodoMVC entities label:todomvc-entities
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  data Task = Task
    { title :: Text
    , completed :: Bool
    } deriving (Eq, Ord)

  type DB = Map Int Task
#+END_SRC

Further describing the application domain, we can now define the operations on
these entities. They follow the acronym CRUD (Create, Read, Update, and Delete):
create a task, read the task list, update the task title or completion status,
and delete a task. There are also several more specific operation required by
the application specification: read a subset of tasks (all, active, or
completed), toggle all tasks' completed status, and delete all completed tasks.

These operations can all be implemented using plain functions over a task or a
map of tasks, which will then be tied into the storage component implemented in
the previous chapter. The implementation of the operations is not particularly
interesting, the interested reader can look them up in the attached files
(=src-demo/todomvc/src/Main.hs=).

The HTML structure of the application is given by the specification, and
contains three natural chapters: an input for creating new tasks at the top, a
task list for editing or deleting existing tasks, and a navigation bar at the
bottom.

TODO: say that we'll go through an example Reflex component in this app

The component =newTaskBox= is included in the snippet ref:new-task-box, where we
can see what a simple GUI component in Reflex might look like. The functions =el= and
=elClass= generate static HTML elements, the =inputElement= function generates an
=<input>=, and the last line prepares the return value of the function, an event
containing the current value of the text box whenever the Enter key is pressed
in it. The =rec= mark the beginning of a /recursive-do/ block where it is possible
to use variables before they are bound, which is translated into a fixpoint
computation by the compiler (in the form of =fix (\out -> do ...; return
out')=. This is necessary as the text box needs to be emptied when we press Enter
in it, as can be seen on the last but one line of the snippet.

The next component, =taskListItem=, is slightly more complicated. According to the
specification, double-clicking on a list item switches it to /edit mode/, which is
however not captured anywhere in the global application state. When in edit
mode, the component may revert to previous state when the Escape key is pressed,
or update the task with new contents of the text box when Enter is pressed
instead. This is achieved by adding a small piece of state in the component, a
boolean value saying whether this task is currently being edited.

The code of this and the remaining components is not too interesting, so we can
skip directly on the next step, the structure of the application's monad
transformer stack.

#+CAPTION: TodoMVC: New task box label:new-task-box
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  newTaskBox :: MonadWidget t m => m (Event t Text)
  newTaskBox =
    elClass "header" "header" $ do
      el "h1" (text "todos")
      rec
        textbox <- inputElement $ def
          & inputElementConfig_elementConfig . elementConfig_initialAttributes .~
            ("class" =: "new-todo" <> "autofocus" =: "autofocus" <>
             "placeholder" =: "What needs to be done?")
          & inputElementConfig_setValue .~ ("" <$ keypress Enter textbox)
      return $ ffilter T.null (T.strip <$> current (value textbox) <@ keypress Enter textbox)
#+END_SRC

The application uses two global pieces of state, the task list, persisted to
LocalStorage on each change, and the router. While the order of the monad
transformers may matter in some special cases like =ExceptT= or =ContT=, the
exception and continuation transformers, neither of the transformers we want to
use, =StorageT= and =RoutedT=, affect program flow, they simply add new capabilities
to the base monad. Also, neither transformer uses the capabilities of the other,
which means we can nest them in an arbitrary order. The newtype of the resulting
monad can be seen in ref:todomvc-mtl, as is the type synonym that contains most
constraints that have available in application code.

#+CAPTION: TodoMVC: Base monad transformer label:todomvc-mtl
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC haskell
  newtype AppT t m a = AppT
    { unAppT :: RoutedT t AppRoute (StorageT t Task m) a
    } deriving ( Functor
               , Applicative
               , Monad
               , MonadRouted t AppRoute
               , MonadStorage t Task
               )

  type AppM t m =
     ( MonadRouted t AppRoute
     , MonadStorage t Task
     , DomBuilder t m
     , PostBuild t m
     )

  runAppT :: _ => AppT t m a -> m a
  runAppT = runLocalStorageT . runHashRoutedT . unAppT
#+END_SRC

The top-level interpreter of the monad is also included. As we can see, we
unwrap the =AppT= from the outside, starting from the newtype wrapper, running the
router, and running the storage last. The router does not use the default
interpreter that uses the Location API as, according to the specification, we
need to route using the hash fragment only (the part after =#= in
e.g. =http://localhost/#!/active=). The storage needs to be persisted from and to
LocalStorage, so we do not use the simple in-memory interpreter, but
=runLocalStorageT= instead.

TODO: placeholder image

This concludes the TodoMVC application, implemented according to its
specification. If compiled using GHCJS, we get a bundle of JavaScript files and
an =index.html= which is the entry point. As described in the chapter [[Deploy]], we
can add a post-compile step that compresses these files and adds any necessary
assets like CSS or icons. It is possible to go a step further and include a
service worker using the service worker component implemented in this work, but
that is what we do in the next application.

** HNPWA
HNPWA cite:hnpwa is a client for Hacker News, a technological news site. Unlike
TodoMVC, HNPWA does not provide a rigid specification and consists only of a
rough guideline of what to implement. The task is to create a Progressive Web
Application that displays information from a given API. This application has 42
implementations, a smaller number than the number of implementations of TodoMVC
but it still provides a good comparison for a frontend framework for PWAs.

TODO: describe functionality (a browser for HN, show item list per filter, show
item with comments, show user).

Specification is very imprecise, we use the HTML structure and CSS styles from
one of the example applications (PreactHN).

As for entities, the official API has an API description including JSON
structure descriptions - User, Item, ItemType, FilterType.

We do not use the storage component in this application, and instead we rely on
the ServiceWorker cache, clearing the cached entry after every POST/PUT.

The official API is rather impractical to use directly, fetch items one by
one. In a real application, we would implement a separate server that saves
every fetched item into database.

We use the service worker for prefetch and for caching of any fetched items.

The router as well, this time including application assets (sw.js) and using the
Location API.
TODO: application shell

Monad transformer stack similar to previous app, but with ServiceWorkerT instead
of storage.

TODO: Placeholder screenshot

TODO: summarize, does it meet the spec? how good is it?
TODO: include info about prerendering - if we had a server, we could render the
HTML directly from DB using e.g. the Persistent wrapper for the StorageT effect,
so it would work for browsers without support for JavaScript,

** RealWorld
RealWorld cite:realworld is the most complex of the comparison projects. It is a
clone of Medium, an online publishing platform, so it requires everything a
"real world" application would. This comparison project also contains a server
component, it is not a comparison of only frontend web frameworks. The numbers
of implementations are: 18 frontends, 34 backends, and 3 full-stack
implementations. The three full-stack implementations include both frontend and
backend components, and are usually written in frameworks that have special
communication channels between them and thus cannot use other backend
implementations.

The task is split into a backend component that is defined by an API
specification, and a frontend component defined by a number of /user stories/ and
a HTML structure. There is a number of features that the application needs to
support, namely: JWT (JSON Web Token) authentication with registration and user
management, the ability to post articles and comments, and to follow users and
favorite articles.

One implementation note: while the specification includes an API specification
in the form of an OpenAPI file, I did not find a server that fulfills it exactly
so I chose the Scotty server written in Haskell and adapted the frontend to its
inaccuracies.

Entities generated from Swagger-generator - Many types (Comment, Article, User,
Login, Profile), not all are strictly necessary - request and response types,
but we can use them to make client requests more explicit.

TODO: interesting components

API queries uses servant-reflex - while adding HTTP requests to the router would
not be too hard, there is not much reason to reimplement something that works...

API however consists of 10+ components joined by (:<|>) (auto-generated,
remember!), so I've abstracted it using a typeclass HasRealWorldClient.

Routing as usual, Location API, serving SW and HTML app shell.

We use a storage component for login/password (settings, Map Text Text).
We use another storage component for articles, and another for comments -
stalewhilerevalidate, we trigger a request but update the storage only if we
receive a successful response.

Monad transformer stack is quite large, three separate storage components (we
could combine them using a different storage type Map -> DMap, but likely not
necessary?) and a router.

TODO: placeholder image

TODO: summarize the app, does it meet the spec? how good is it?
TODO: frontend tests

* Conclusion
In this work, I have led the reader from a general introduction to modern Web
technologies, through an overview of the capabilities of contemporary Web
frameworks, to an analysis of the capabilities of Haskell on the frontend and
specifically the state of available features in its library ecosystem.

In the second half of this work, I have designed and implemented three
components, a router, a service worker generator with supporting libraries, and
a key-value browser storage library, that together make a significant
contribution to the ecosystem of Haskell on the frontend. These components don't
comprise a framework equivalent to most popular JavaScript frameworks, but they
enable creating Progressive Web Applications in Haskell, which was the set goal
of this work.

** Next work
The work that needs to immediately follow the submission of this thesis is
publishing the components created here and seeking feedback from the Haskell
community. This includes fulfilling all the formal requirements necessary for
publishing the individual packages to Hackage, the package repository for
Haskell, and writing up their documentation in two tiers: API documentation and
user manuals. For the manuals and showcases, I will likely reuse some of the
case studies presented in the previous chapter.

I expect to spend some time adapting my work according to any feedback from the
community: expanding documentation, creating adapters to other libraries,
implementing more requested functionality, and other necessary work.

With the libraries implemented in this work, there is however still a number of
capabilities that Haskell lacks, compared to developing browser applications in
JavaScript.

- a palette of pre-built GUI components
- internationalization
- a unified command-line interface to build tools
- code generation
- debugging tools for the frontend, e.g. variable watching, inspecting application state

There is also a number of other ideas with various usefulness that would make
building web applications in Haskell easier. Some are natural extensions of the
implemented components, others are independent projects that implement other
functionality that would make building web applications in Haskell easier. What
follows is an incomplete list of such project topics:

- CSS-in-Haskell (similar to CSS-in-JS)
- crash reports (traceback, application state) for the browser
- end-to-end tests that run can asserts both on the client and the server
- dynamic user-provided content - HTML-like markup that can use preregistered named
  components, a user-friendly editor
- typed components that use assets, like =<img>= or =<link>=
- forms - a set of components, validation, automatic derivation from a datatype
- a query language for browser storage, using IndexedDB
- automatic synchronization for browser storage
- authentication in the router: "user is logged-in", "user has role X", "user
  can perform action Y"
- HTTP/2 Push support on the server - sending all necessary assets together with
  the first request
- WebIDL and a JavaScript-generating DSL for service workers
- effect system for Reflex, as a more flexible extension mechanism
- serializable effects that can be interpreted both in the browser or on the
  server if the client is missing required data

To summarize this work, I have studied the current state of Haskell on the
frontend, expanded the library ecosystem with three new additions, implemented a
number of example applications, and suggested follow-up projects to remedy the
remaining deficiencies compared to the features available in JavaScript.

* (bibliography, start of appendix)                           :ignoreheading:
#+BEGIN_EXPORT latex
\makeatletter
\def\@openbib@code{\addcontentsline{toc}{chapter}{Bibliography}}
\makeatother
\bibliographystyle{bib-styles/englishiso}

\begin{flushleft}
\bibliography{projekt}
\end{flushleft}
\iftwoside\cleardoublepage\fi

% Appendices
\appendix
\appendixpage
\iftwoside\cleardoublepage\fi

\startcontents[chapters]
% \setlength{\parskip}{0pt}
% \printcontents[chapters]{l}{0}{\setcounter{tocdepth}{2}}
% \setlength{\parskip}{0.5\bigskipamount}
\iftwoside\cleardoublepage\fi
#+END_EXPORT

* Contents of the attached data storage
TODO: fill in

* Poster
TODO: fill in
