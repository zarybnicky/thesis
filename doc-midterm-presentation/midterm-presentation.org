#+STARTUP: beamer
#+TITLE: A Haskell Platform for Creating Progressive Web Applications
#+SUBTITLE: A midterm progress report
#+BEAMER_HEADER: \title[PWAs in Haskell]{A Haskell Platform for Creating Progressive Web Applications}
#+DATE: 2019-01-29
#+AUTHOR: Jakub Zárybnický
#+OPTIONS: H:2 toc:nil num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{tikzsymbols}
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* What, why?
** Full-stack Haskell?
- Why Haskell? Why on the frontend?     \pause
  - Compile-to-JavaScript languages accepted (see Elm)
  - Code sharing between server and client (business logic, entities)    \pause
  - Many companies use it, and also contribute to OSS:
    - Obsidian - Reflex, Obelisk, Rhyolite
    - Tweag - Asterius, Inline-js
    - QFPL - Reflex-workshop, many UI components
    - IOHK (Cardano) - iohk-ops

** PWA?
- New buzzword from Google
- Recent web development trend
- An /almost/ native app
  - Load a website
  - Click "Add to homepage"
  - Use like a native application

** PWA features
- /Progressive Web App Checklist/ -- Google
\pause
- Required:
  - Responsive and fast ("Native experience")
  - Available offline
  - Push notifications
  - Device APIs
\pause
- Optional:
  - Full functionality when offline
  - Data sync
  - Pre-rendered

** PWA...
- Technologies:
  - Service Workers
  - Web App Manifest
  - History API
  - Web Share API
  - Network Information API
  - Credential Management API

* What have I done?
** What have I been doing?
- Research:
  - PWA developers' expectations (across languages)
  - Current Haskell libraries and tooling

\pause

- Prototypes:
  - A full-stack application
  - An offline-capable application
  - A frontend debugger toolbar
  - CI/CD for Haskell

** What haven't I been doing?
\pause

- Regular writing
  - Blog
  - Progress reports   \pause
    - Oops...

* What's next?
** What's next?

- Must-haves:
  - Push notifications (server & client library)
  - Browser routing (client library)
  - Service Worker wrapper (build tool, client library)
\pause
- Nice-to-haves:
  - Pre-rendering (server library)
  - Data sync (server & client library)

** Wrapping up
- Thanks for listening!
\\
- https://github.com/zarybnicky/thesis
